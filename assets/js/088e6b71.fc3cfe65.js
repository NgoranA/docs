"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[58821],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},65924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const r={},i="Deploy a PostgreSQL database with Neon",l={unversionedId:"platformatic-cloud/deploy-database-neon",id:"version-0.32.0/platformatic-cloud/deploy-database-neon",title:"Deploy a PostgreSQL database with Neon",description:"Neon offers multi-cloud fully managed",source:"@site/versioned_docs/version-0.32.0/platformatic-cloud/deploy-database-neon.md",sourceDirName:"platformatic-cloud",slug:"/platformatic-cloud/deploy-database-neon",permalink:"/docs/0.32.0/platformatic-cloud/deploy-database-neon",draft:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-0.32.0/platformatic-cloud/deploy-database-neon.md",tags:[],version:"0.32.0",frontMatter:{},sidebar:"docs",previous:{title:"Cloud Quick Start Guide",permalink:"/docs/0.32.0/platformatic-cloud/quick-start-guide"}},s={},p=[{value:"Create a project on Neon",id:"create-a-project-on-neon",level:2},{value:"Configure Github Environments and Secrets",id:"configure-github-environments-and-secrets",level:2},{value:"Configure the main branch workflow",id:"configure-the-main-branch-workflow",level:2},{value:"Configure the preview environment workflow",id:"configure-the-preview-environment-workflow",level:2},{value:"GitHub Action to create a preview environment",id:"github-action-to-create-a-preview-environment",level:3},{value:"Configure preview environment cleanup",id:"configure-preview-environment-cleanup",level:3},{value:"Deployment",id:"deployment",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deploy-a-postgresql-database-with-neon"},"Deploy a PostgreSQL database with Neon"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://neon.tech/"},"Neon")," offers multi-cloud fully managed\nPostgres with a generous free tier. They separated storage and\ncompute to offer autoscaling, branching, and bottomless storage.\nIt offers a great environment for creating database preview\nenvironments for your ",(0,o.kt)("a",{parentName:"p",href:"https://oss.platformatic.dev/docs/reference/db/introduction"},"Platformatic DB"),"\napplications."),(0,o.kt)("p",null,"This guide shows you how to integrate Neon branch deployments with your\nPlatformatic app's GitHub Actions workflows. It assumes you have already\nfollowed the ",(0,o.kt)("a",{parentName:"p",href:"/docs/quick-start-guide"},"Quick Start Guide"),"."),(0,o.kt)("h2",{id:"create-a-project-on-neon"},"Create a project on Neon"),(0,o.kt)("p",null,"To set up an account with Neon, ",(0,o.kt)("a",{parentName:"p",href:"https://neon.tech"},"open their website"),", sign up and create a\nnew project."),(0,o.kt)("p",null,"Take note of the following configuration setting values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The connection string for your ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," branch database, to be stored in a ",(0,o.kt)("inlineCode",{parentName:"li"},"NEON_DB_URL_PRODUCTION")," secret"),(0,o.kt)("li",{parentName:"ul"},"The Project ID (available under the project ",(0,o.kt)("strong",{parentName:"li"},"Settings"),"), to be stored in a ",(0,o.kt)("inlineCode",{parentName:"li"},"NEON_PROJECT_ID")," secret"),(0,o.kt)("li",{parentName:"ul"},"Your API key (available by clicking on your user icon > ",(0,o.kt)("strong",{parentName:"li"},"Account > Developer settings"),"), to be stored under ",(0,o.kt)("inlineCode",{parentName:"li"},"NEON_API_KEY")),(0,o.kt)("li",{parentName:"ul"},"The username specified in your database connection string (available under project ",(0,o.kt)("strong",{parentName:"li"},"Dashboard > Connection Details"),"), to be stored in a ",(0,o.kt)("inlineCode",{parentName:"li"},"DBUSER")," secret"),(0,o.kt)("li",{parentName:"ul"},"The password specified in your database connection string (available under project ",(0,o.kt)("strong",{parentName:"li"},"Dashboard > Connection Details"),"), to be stored in a ",(0,o.kt)("inlineCode",{parentName:"li"},"DBPASSWORD")," secret")),(0,o.kt)("p",null,"You can learn more about Neon API keys in their ",(0,o.kt)("a",{parentName:"p",href:"https://neon.tech/docs/manage/api-keys"},"Manage API Keys")," documentation."),(0,o.kt)("h2",{id:"configure-github-environments-and-secrets"},"Configure Github Environments and Secrets"),(0,o.kt)("p",null,"Now you need to set the configuration values listed above as\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"repository secrets"),"\non your project's GitHub repository.\nLearn how to use environments for deployment ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment"},"in GitHub's documentation"),"."),(0,o.kt)("p",null,"Configure the GitHub Environments for your repository to have:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"production")," secrets, available only to the ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," branch:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NEON_DB_URL_PRODUCTION")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"previews")," secrets available to all branches:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NEON_PROJECT_ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NEON_API_KEY")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DBUSER")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DBPASSWORD"))))),(0,o.kt)("h2",{id:"configure-the-main-branch-workflow"},"Configure the main branch workflow"),(0,o.kt)("p",null,"Replace the contents of your app's workflow for static workspace deployment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/platformatic-static-workspace-deploy.yml"',title:'".github/workflows/platformatic-static-workspace-deploy.yml"'},"name: Deploy Platformatic application to the cloud\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'docs/**'\n      - '**.md'\n\njobs:\n  build_and_deploy:\n    environment:\n      name: production\n    permissions:\n      contents: read\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout application project repository\n        uses: actions/checkout@v3\n      - name: npm install --omit=dev\n        run: npm install --omit=dev\n      - name: Deploy project\n        uses: platformatic/onestep@latest\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          platformatic_workspace_id: <YOUR_STATIC_WORKSPACE_ID>\n          platformatic_workspace_key: ${{ secrets.PLATFORMATIC_STATIC_WORKSPACE_API_KEY }}\n          platformatic_config_path: ./platformatic.db.json\n          secrets: DATABASE_URL\n        env:\n          DATABASE_URL: ${{ secrets.NEON_DB_URL_PRODUCTION }}\n          PLT_SERVER_LOGGER_LEVEL: info \n          PORT: 3042 \n          PLT_SERVER_HOSTNAME: 127.0.0.1\n")),(0,o.kt)("p",null,"Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"<YOUR_STATIC_WORKSPACE_ID>")," with the workspace ID that you previously had in this file."),(0,o.kt)("p",null,"When your app is deployed to the static workspace it will now be configured to connect to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch database for your Neon project."),(0,o.kt)("h2",{id:"configure-the-preview-environment-workflow"},"Configure the preview environment workflow"),(0,o.kt)("p",null,"Neon allows up to 10 database branches on their free tier. You can automatically create a new\ndatabase branch when a pull request is opened, and then automatically remove it when the pull\nrequest is merged."),(0,o.kt)("h3",{id:"github-action-to-create-a-preview-environment"},"GitHub Action to create a preview environment"),(0,o.kt)("p",null,"Replace the contents of your app's workflow for dynamic workspace deployment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/platformatic-dynamic-workspace-deploy.yml"',title:'".github/workflows/platformatic-dynamic-workspace-deploy.yml"'},'name: Deploy Platformatic application to the cloud\non:\n  pull_request:\n    paths-ignore:\n      - \'docs/**\'\n      - \'**.md\'\n\n# This allows a subsequently queued workflow run to interrupt previous runs\nconcurrency:\n  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"\n  cancel-in-progress: true\n\njobs:\n  build_and_deploy:\n    environment:\n      name: previews\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout application project repository\n        uses: actions/checkout@v3\n      - name: npm install --omit=dev\n        run: npm install --omit=dev\n      - name: Get PR number\n        id: get_pull_number\n        run: |\n          pull_sha=$(jq --raw-output .pull_request.base.sha "$GITHUB_EVENT_PATH")\n          echo "pull_sha=${pull_sha}" >> $GITHUB_OUTPUT\n          echo $pull_sha\n      - uses: neondatabase/delete-branch-by-name-action@8260b587b411ffa0071bf68d0df2e37583aa719a\n        with:\n          project_id: ${{ secrets.NEON_PROJECT_ID }}\n          branch_name: ${{ steps.get_pull_number.outputs.pull_sha }}\n          api_key: ${{ secrets.NEON_API_KEY }}\n      - run: sleep 10\n      - uses: neondatabase/create-branch-action@dc4ce9e0161722f64cedc66bb2aef72d556ccf7c\n        with:\n          project_id: ${{ secrets.NEON_PROJECT_ID }}\n          branch_name: ${{ steps.get_pull_number.outputs.pull_sha }}\n          api_key: ${{ secrets.NEON_API_KEY }}\n          username: ${{ secrets.DBUSER }}\n          Password: ${{ secrets.DBPASSWORD }}\n        id: create-branch\n      - name: Get DATABASE_URL\n        run: echo DATABASE_URL=${{ steps.create-branch.outputs.db_url}}/neondb\n      - name: Deploy project\n        uses: platformatic/onestep@latest\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          platformatic_workspace_id: <YOUR_DYNAMIC_WORKSPACE_ID>\n          platformatic_workspace_key: ${{ secrets.PLATFORMATIC_DYNAMIC_WORKSPACE_API_KEY }}\n          platformatic_config_path: ./platformatic.db.json\n        env:\n          DATABASE_URL: ${{ steps.create-branch.outputs.db_url}}/neondb\n          PLT_SERVER_LOGGER_LEVEL: info \n          PORT: 3042 \n          PLT_SERVER_HOSTNAME: 127.0.0.1\n')),(0,o.kt)("p",null,"Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"<YOUR_DYNAMIC_WORKSPACE_ID>")," with the workspace ID that you previously had in this file."),(0,o.kt)("h3",{id:"configure-preview-environment-cleanup"},"Configure preview environment cleanup"),(0,o.kt)("p",null,"After a pull request to the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch is merged, you should remove the matching database branch."),(0,o.kt)("p",null,"Create a new file, ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows/cleanup-neon-branch-db.yml"),", and copy and paste in the following\nworkflow configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/cleanup-neon-branch-db.yml"',title:'".github/workflows/cleanup-neon-branch-db.yml"'},'name: Cleanup Neon branch database\non:\n  push:\n    branches:\n      - \'main\'\njobs:\n  delete-branch:\n    environment: \n      name: previews\n    permissions: write-all\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get PR info\n        id: get-pr-info\n        uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1\n        with:\n          github_token: ${{secrets.GITHUB_TOKEN}}\n\n      - run: |\n          echo ${{ steps.get-pr-info.outputs.number}}\n      - name: Get last commit SHA\n        id: get_sha\n        run: |\n          echo "sha=${{ github.event.before }}" >> $GITHUB_OUTPUT\n      - name: Search branch by name\n        id: get_branch_id\n        run: |\n          branch_id=$(curl --silent \\\n            "https://console.neon.tech/api/v2/projects/${PROJECT_ID}/branches" \\\n            --header "Accept: application/json" \\\n            --header "Content-Type: application/json" \\\n            --header "Authorization: Bearer ${API_KEY}" \\\n            | jq -r .branches \\\n            | jq -c \'.[] | select(.name | contains("\'${SHA}\'")) .id\' \\\n            | jq -r \\\n            ) \\\n            \n          echo "branch_id=${branch_id}" >> $GITHUB_OUTPUT\n        env:\n          PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}\n          API_KEY: ${{ secrets.NEON_API_KEY }}\n          SHA: ${{ steps.get_sha.outputs.sha }}\n      - name: Delete Neon Branch\n        uses: neondatabase/delete-branch-action@v2\n        with:\n          project_id: ${{ secrets.NEON_PROJECT_ID }}\n          branch_id: ${{ steps.get_branch_id.outputs.branch_id }}\n          api_key: ${{ secrets.NEON_API_KEY }}\n')),(0,o.kt)("h2",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"To deploy these changes to your app:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a Git branch locally (",(0,o.kt)("inlineCode",{parentName:"li"},"git checkout -b <BRANCH_NAME>"),")"),(0,o.kt)("li",{parentName:"ol"},"Commit your changes and push them to GitHub"),(0,o.kt)("li",{parentName:"ol"},"Open a pull request on GitHub - a branch will automatically be created for your Neon database and a preview app will be deployed to Platformatic Cloud (in your app's dynamic workspace)."),(0,o.kt)("li",{parentName:"ol"},"Merge the pull request - the Neon databsase branch will be automatically deleted and your app will be deployed to Platformatic Cloud (in your app's static workspace).")))}d.isMDXComponent=!0}}]);